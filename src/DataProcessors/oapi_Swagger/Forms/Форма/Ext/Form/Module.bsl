#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресаМакетов = Новый Структура();
	АдресаМакетов.Вставить("swagger_editor", АдресМакета("swagger_editor"));
	АдресаМакетов.Вставить("bsl_console"   , АдресМакета("bsl_console"));
	
	Макеты = Новый ФиксированнаяСтруктура(АдресаМакетов);
	
	ИспользоватьСхемыДанных = Истина;
	
	ЗаполнитьКодРедактораПоУмолчанию();
	ЗаполнитьОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзвлечьИсходники();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьОписаниеAPI(Команда)
	
	Если ТипСервиса = 2 Тогда
		ОбновитьКодРедактора();
		Результат = ЗаполнитьОписаниеПоКодуРедактора();
		ОбработатьРезультатВыполненияКода(Результат);
	Иначе
		ЗаполнитьОписание();
	КонецЕсли;
	
	ОбновитьТекстРедактораSwagger();
	ОбновитьТекстРедактораJSON();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(Значение, ЗначениеПоУмолчанию = 0)
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, ЗначениеПоУмолчанию);
	
КонецФункции

&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	
	Возврат ЭтотОбъект().ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Функция АдресМакета(ИмяМакета)
	
	Макет = ПолучитьМакет(ИмяМакета);
	Возврат ПоместитьВоВременноеХранилище(Макет, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКодРедактора()
	
	Если ТипСервиса = 2 Тогда
		КодРедактора = BSL_Code().getText();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Редакторы

&НаСервере
Процедура ЗаполнитьКодРедактораПоУмолчанию()
	
	Макет = ПолучитьМакет("МакетКода");
	КодРедактора = Макет.ПолучитьТекст();
	
	Макет = ПолучитьМакет("МакетОбъектовРедактора");
	ОбъектыРедактора = Макет.ПолучитьТекст();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруРезультата()
	
	СтруктуруРезультата = Новый Структура();
	СтруктуруРезультата.Вставить("Успешно", Ложь);
	СтруктуруРезультата.Вставить("ИсходнаяСтрока", "");
	СтруктуруРезультата.Вставить("ОписаниеОшибки", "");
	СтруктуруРезультата.Вставить("Сервис", Неопределено);
	
	Возврат СтруктуруРезультата;
	
КонецФункции

&НаСервере
Функция ВыполнитьКодРедактора()
	
	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	
	Код = КодРедактора;
	Код = Код + Символы.ПС;
	Код = Код + "RVS6e6c2a.Сервис = Сервис;";
	
	Попытка
		Выполнить(Код);
		RVS6e6c2a.Успешно = Истина;
	Исключение
		OS6e6c2a = ИнформацияОбОшибке();
		RVS6e6c2a.ИсходнаяСтрока = OS6e6c2a.ИсходнаяСтрока;
		Если OS6e6c2a.Причина <> Неопределено Тогда
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Причина.Описание;
		Иначе
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Описание;
		КонецЕсли;
	КонецПопытки;
	
	Возврат RVS6e6c2a; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписание()
	
	Если ТипСервиса = 0 Тогда
		Сервис = oapi_Документация.ПолучитьСервисЗоомагазина(ИспользоватьСхемыДанных);
	Иначе
		Сервис = oapi_Документация.ПолучитьСервисЗавода(ИспользоватьСхемыДанных);
	КонецЕсли;
	
	Попытка
		ОписаниеJSON = Сервис.ПолучитьОписаниеOpenAPI();
	Исключение
		ОписаниеJSON = "";
		СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОписаниеПоКодуРедактора()
	
	Результат = ВыполнитьКодРедактора();
	
	Если Результат.Успешно Тогда
		Попытка
			Сервис = Результат.Сервис;
			ОписаниеJSON = Сервис.ПолучитьОписаниеOpenAPI();
		Исключение
			ОписаниеJSON = "";
			СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Результат.Сервис = Неопределено;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОшибкуВыполненияКода(ОписаниеОшибки)
	
	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);
	
	ПозицияРазделителя = СтрНайти(ОписаниеОшибки, ":");
	
	Если 0 < ПозицияРазделителя Тогда
		
		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));
		
		СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");
		
		Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);
		
		Ошибка.НомерСтроки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 1), 0);
		Ошибка.НомерКолонки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 2), 1);
		
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокуВКоде(Строка)
	
	НомерСтроки = BSL_Code().findText(Строка);
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Функция ИзвлечьНомерСтрокиИзОписанияОшибки(ОписаниеОшибки)
	
	НомерСтроки = 0;
	ОткрывающаяСкобка = СтрНайти(ОписаниеОшибки, "(");	
	
	Если 0 < ОткрывающаяСкобка Тогда
		
		ЗакрывающаяСкобка = СтрНайти(ОписаниеОшибки, ")", , ОткрывающаяСкобка);
		
		Если 0 < ЗакрывающаяСкобка Тогда
			
			Позиция = Сред(ОписаниеОшибки, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - ОткрывающаяСкобка - 1);
			Подстроки = СтрРазделить(Позиция, ",");
			
			Попытка
				НомерСтроки = Число(Подстроки[0]);
			Исключение
				НомерСтроки = 0;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполненияКода(Результат)
	
	Если НЕ Результат.Успешно Тогда
		
		Ошибка = ПолучитьОшибкуВыполненияКода(Результат.ОписаниеОшибки);
		
		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = ИзвлечьНомерСтрокиИзОписанияОшибки(Результат.ОписаниеОшибки);
		КонецЕсли;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = НайтиСтрокуВКоде(Результат.ИсходнаяСтрока);
		КонецЕсли;
		
		СообщитьПользователю(Ошибка.ТекстОшибки);
		
		Если 0 < НомерСтроки Тогда
			BSL_Code().markError(НомерСтроки, НомерКолонки);
		КонецЕсли;
		
	Иначе
		
		Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаSwagger;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаИнициализацииРедактора(ТекстОшибки)
	
	ПоказатьПредупреждение(, ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Функция ИндексныйФайл(ИмяКаталога)
	
	Возврат ИмяКаталога + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	Если ДопПараметры.ИмяРеквизита = "РедакторBSL" Тогда
		РедакторКода = СкопированныйФайл;
	КонецЕсли;
	ЭтотОбъект[ДопПараметры.ИмяРеквизита] = СкопированныйФайл;
	ЭтотОбъект["ИсходникиЗагружены" + ДопПараметры.ИмяРеквизита] = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(ДопПараметры.ИмяКаталога + ДопПараметры.ИмяМакета + ".zip");
		Файл.ИзвлечьВсе(ДопПараметры.ИмяКаталога);
		ТочкаВхода = ДопПараметры.ИмяКаталога + "index.html";
		ИндексныйФайл = ИндексныйФайл(ДопПараметры.ИмяКаталога );
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект, ДопПараметры);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ДопПараметры.Страница.Видимость = Ложь;
		ОшибкаИнициализацииРедактора("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект, ДопПараметры);
	ИмяФайла = ДопПараметры.ИмяКаталога + ДопПараметры.ИмяМакета + ".zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(Макеты[ДопПараметры.ИмяМакета]);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте(ДопПараметры)
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект, ДопПараметры);
	НачатьУдалениеФайлов(Оповещение, ДопПараметры.ИмяКаталога, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ИндексныйФайл = ИндексныйФайл(ДопПараметры.ИмяКаталога);
		ТочкаВхода = ДопПараметры.ИмяКаталога + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект, ДопПараметры);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		
		Если Не ЗначениеЗаполнено(ДопПараметры) Тогда
		
			КаталогBSL = КаталогИсходников + "bsl_console\";
			ПараметрыОповещения = Новый Структура();
			ПараметрыОповещения.Вставить("ИмяКаталога" , КаталогBSL);
			ПараметрыОповещения.Вставить("ИмяРеквизита", "РедакторBSL");
			ПараметрыОповещения.Вставить("ИмяРедактора", "bsl_console");
			ПараметрыОповещения.Вставить("ИмяМакета"   , "bsl_console");
			ПараметрыОповещения.Вставить("Страница"    , Элементы.СтраницаBSL);
			Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект, ПараметрыОповещения);
			НачатьСозданиеКаталога(Оповещение, КаталогBSL);
			
			КаталогSwagger = КаталогИсходников + "swagger_editor\";
			ПараметрыОповещения = Новый Структура();
			ПараметрыОповещения.Вставить("ИмяКаталога" , КаталогSwagger);
			ПараметрыОповещения.Вставить("ИмяРеквизита", "РедакторSwagger");
			ПараметрыОповещения.Вставить("ИмяРедактора", "swagger-editor");
			ПараметрыОповещения.Вставить("ИмяМакета"   , "swagger_editor");
			ПараметрыОповещения.Вставить("Страница"    , Элементы.СтраницаSwagger);
			Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект, ПараметрыОповещения);
			НачатьСозданиеКаталога(Оповещение, КаталогSwagger);
			
		Иначе
			
			Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект, ДопПараметры);
			ФайлНаДиске = Новый Файл(ДопПараметры.ИмяКаталога + "index.html");
			ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДопПараметры) Тогда
			ДопПараметры.Страница.Видимость = Ложь;
		Иначе
			ОшибкаИнициализацииРедактора("Не удалось создать каталог для исходников");
			Элементы.СтраницаBSL.Видимость = Ложь;
			Элементы.СтраницаSwagger.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект, ДопПараметры);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "swagger_1c\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Функция BSL_JSON()
	
	Возврат Элементы.РедакторBSL.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Функция BSL_Code()
	
	Возврат Элементы.РедакторКода.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура ОбнулитьМетаданныеJSON() Экспорт
	
	BSL_JSON().clearMetadata();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьМетаданныеBSL() Экспорт
	
	BSL_Code().clearMetadata();
	BSL_Code().updateMetadata(ОбъектыРедактора);
	
КонецПроцедуры

&НаКлиенте
Процедура Форматировать() Экспорт
	
	BSL_JSON().formatDocument();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстРедактораJSON()
	
	BSL_JSON().eraseText();
	BSL_JSON().setText(ОписаниеJSON);
	ПодключитьОбработчикОжидания("Форматировать", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстРедактораJSON()
	
	BSL_Code().setText(КодРедактора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстРедактораSwagger()
	
	Swagger().specActions.updateSpec(ОписаниеJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьРедакторBSL(Редактор, Режим)
	
	Инфо = Новый СистемнаяИнформация();
	
	Редактор.init(Инфо.ВерсияПриложения);
	Редактор.setOption("autoResizeEditorLayout", Истина);
	Редактор.setOption("renderQueryDelimiters", Истина);
	Редактор.setOption("generateModificationEvent", Истина);
	Редактор.hideScrollX();
	Редактор.hideScrollY();
	Редактор.setLanguageMode(Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторBSLДокументСформирован(Элемент)
	
	Если ИсходникиЗагруженыРедакторBSL Тогда
		Попытка
			ИнициализироватьРедакторBSL(BSL_JSON(), "json");
			ОбновитьТекстРедактораJSON();
			ПодключитьОбработчикОжидания("ОбнулитьМетаданныеJSON", 1, Истина);
		Исключение
			Элементы.СтраницаBSL.Видимость = Ложь;
			Элементы.СтраницаJSON.Видимость = Истина;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция Swagger()
	
	Возврат Элементы.РедакторSwagger.Документ.defaultView.editor;
	
КонецФункции

&НаКлиенте
Процедура РедакторSwaggerДокументСформирован(Элемент)
	
	Если ИсходникиЗагруженыРедакторSwagger Тогда
		ОбновитьТекстРедактораSwagger();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	#Если ВебКлиент Тогда
		Элементы.СтраницаBSL.Видимость = Ложь;
		Элементы.СтраницаSwagger.Видимость = Ложь;
		Элементы.СтраницаJSON.Видимость = Истина;
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(Событие)
	
	Если Событие <> Неопределено Тогда
		
		ИмяСобытия = Событие.event;
		
		Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторКодаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторКодаДокументСформирован(Элемент)
	
	Если ИсходникиЗагруженыРедакторBSL Тогда
		Попытка
			ИнициализироватьРедакторBSL(BSL_Code(), "bsl");
			УстановитьТекстРедактораJSON();
			ПодключитьОбработчикОжидания("ОбнулитьМетаданныеBSL", 1, Истина);
		Исключение
			ОшибкаИнициализацииРедактора("Не удалось инициализировать редактор кода");
			Элементы.СтраницаBSL.Видимость = Ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипСервисаПриИзменении(Элемент)

	Элементы.СтраницаРедакторКода.Видимость = (ТипСервиса = 2);
	
	Если Элементы.СтраницаРедакторКода.Видимость Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаРедакторКода;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти