#Область ФормированиеОписания

Функция СтруктураСоответствие(ТипДанных)
	
	Если ТипДанных = Тип("ОбработкаОбъект.oapi_Соответствие") Тогда
		Возврат Новый Соответствие();
	Иначе
		Возврат Новый Структура();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруОписаниеДанных(Данные, ТипДанных)
	
	ОписаниеДанных = СтруктураСоответствие(ТипДанных);
	ОписаниеДанных.Вставить("required", Данные.Обязательное);
	ОписаниеДанных.Вставить("type", "");
	ОписаниеДанных.Вставить("description", Данные.Описание);
	
	Возврат ОписаниеДанных;
	
КонецФункции

Процедура ЗаполнитьОписаниеПримитивногоТипа(ОписаниеДанных, Данные)
	
	ТипДанных = ТипЗнч(Данные.Значение);
	
	Если ТипДанных = Тип("Число") Тогда
		
		Если СтрНайти(Строка(Данные.Значение), ".") = 0 Тогда
			ОписаниеДанных["type"] = "number";
		Иначе
			ОписаниеДанных["type"] = "integer";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Данные.Значение) Тогда
			ОписаниеДанных.Вставить("example", Данные.Значение);
		КонецЕсли;
		
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		
		ОписаниеДанных["type"] = "string";
		
		Если ЗначениеЗаполнено(Данные.Значение) Тогда
			ОписаниеДанных.Вставить("example", Данные.Значение);
		КонецЕсли;
		
		Если 0 < Данные.Перечисления().Количество() Тогда
			ОписаниеДанных.Вставить("enum", Данные.Перечисления());
		КонецЕсли;
		
	ИначеЕсли ТипДанных = Тип("Булево") Тогда
		
		ОписаниеДанных["type"] = "boolean";
		
		Если ЗначениеЗаполнено(Данные.Значение) Тогда
			ОписаниеДанных.Вставить("example", Данные.Значение);
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Непредусмотренный примитивный тип.'");
		ВызватьИсключение(ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеСтруктурыСоответствия(ОписаниеДанных, Данные, Сервис)
	
	ТипДанных = ТипЗнч(Данные);
	
	ОбязательныеПоля = Новый Массив();
	
	ОписаниеДанных["type"] = "object";
	ОписаниеДанных.Вставить("properties", СтруктураСоответствие(ТипДанных));
	
	ОписаниеСхемы = oapi_ОбщегоНазначения.СкопироватьКоллекцию(ОписаниеДанных);
	ОписаниеСхемы.Вставить("properties", СтруктураСоответствие(ТипДанных));
	
	Для Каждого Обход Из Данные.Данные Цикл
		
		ОписаниеКлюча = ПолучитьОписаниеДанных(Обход.Значение, Сервис);
		
		Если ОписаниеКлюча["type"] = "object" Тогда
			Если Обход.Значение.Обязательное Тогда
				ОбязательныеПоля.Добавить(Обход.Ключ);
			КонецЕсли;
		Иначе
			Если ОписаниеКлюча["required"] Тогда
				ОбязательныеПоля.Добавить(Обход.Ключ);
			КонецЕсли;
			ОписаниеКлюча.Удалить("required");
		КонецЕсли;
		
		Если Сервис.ИспользоватьСхемыДанных Тогда
			Если ОписаниеКлюча["type"] = "object" Тогда
				Ссылка = Новый Соответствие();
				Ссылка["$ref"] = "#/components/schemas/" + ОписаниеКлюча["component"];
				ОписаниеСхемы["properties"].Вставить(Обход.Ключ, Ссылка);
			Иначе
				ОписаниеСхемы["properties"].Вставить(Обход.Ключ, ОписаниеКлюча);
			КонецЕсли;
			ОписаниеДанных.Удалить("properties");
		Иначе
			ОписаниеДанных["properties"].Вставить(Обход.Ключ, ОписаниеКлюча);
		КонецЕсли;
		
	КонецЦикла;
	
	Если 0 < ОбязательныеПоля.Количество() Тогда
		ОписаниеСхемы.Вставить("required", ОбязательныеПоля);
		ОписаниеДанных.Вставить("required", ОбязательныеПоля);
	Иначе
		ОписаниеСхемы.Удалить("required");
		ОписаниеДанных.Удалить("required");
	КонецЕсли;
	
	Если Сервис.ИспользоватьСхемыДанных Тогда
		ИдентификаторСхемыДанных = Данные.ИдентификаторСхемыДанных;
		ОписаниеДанных.Вставить("component", ИдентификаторСхемыДанных);
		Сервис.УстановитьОписаниеСхемы(ИдентификаторСхемыДанных, ОписаниеСхемы);
		ОписаниеДанных.Вставить("schema", Новый Соответствие);
		ОписаниеДанных["schema"]["$ref"] = "#/components/schemas/" + ИдентификаторСхемыДанных;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеМассива(ОписаниеДанных, Данные, Сервис)
	
	ОписаниеДанных["type"] = "array";
	ОписаниеДанных.Вставить("items", Новый Соответствие);
	
	Для Каждого Значение Из Данные.Данные Цикл
		
		ОписаниеЭлемента = ПолучитьОписаниеДанных(Значение, Сервис);
		
		Если Сервис.ИспользоватьСхемыДанных Тогда
			
			Если ОписаниеЭлемента["type"] = "object" Тогда
				ОписаниеДанных["items"]["$ref"] = "#/components/schemas/" + ОписаниеЭлемента["component"];
			Иначе
				Для Каждого Обход Из ОписаниеЭлемента Цикл
					Если Обход.Ключ <> "required" Тогда
						ОписаниеДанных["items"].Вставить(Обход.Ключ, Обход.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Если ОписаниеЭлемента["type"] = "object" Тогда
				ОписаниеЭлемента.Удалить("description");
				ОписаниеЭлемента.Удалить("type");
			КонецЕсли;
			
			ОписаниеЭлемента.Удалить("required");
			ОписаниеДанных["items"] = ОписаниеЭлемента;
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОписаниеДанных(Данные, Сервис) Экспорт
	
	ТипДанных = ТипЗнч(Данные);
	ОписаниеДанных = ПолучитьСтруктуруОписаниеДанных(Данные, ТипДанных);
	
	Если ТипДанных = Тип("ОбработкаОбъект.oapi_ПримитивныйТип") Тогда
		
		ЗаполнитьОписаниеПримитивногоТипа(ОписаниеДанных, Данные)
		
	ИначеЕсли ТипДанных = Тип("ОбработкаОбъект.oapi_Структура") Или ТипДанных = Тип("ОбработкаОбъект.oapi_Соответствие") Тогда
		
		ЗаполнитьОписаниеСтруктурыСоответствия(ОписаниеДанных, Данные, Сервис);
		
	ИначеЕсли ТипДанных = Тип("ОбработкаОбъект.oapi_Массив") Тогда
		
		ЗаполнитьОписаниеМассива(ОписаниеДанных, Данные, Сервис);
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Неизвестные данные.'");
		ВызватьИсключение(ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ОписаниеДанных;
	
КонецФункции

#КонецОбласти