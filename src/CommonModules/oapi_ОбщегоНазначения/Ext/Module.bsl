#Область УниверсальныеКоллекции

Функция СкопироватьРекурсивно(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("Соответствие") Тогда
		Приемник = СкопироватьСоответствие(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
		Приемник = СкопироватьСтруктуру(Источник);
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

Функция СкопироватьСоответствие(Источник) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из Источник Цикл
		Результат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СкопироватьСтруктуру(Источник) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого КлючИЗначение Из Источник Цикл
		Результат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СкопироватьКоллекцию(Источник) Экспорт
	
	Перем Результат;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		Результат = СкопироватьСтруктуру(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("Соответствие") Тогда
		Результат = СкопироватьСоответствие(Источник);
	Иначе
		Результат = Источник;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Сериализация

// Возвращает данные из JSON-строки
//
// Параметры:
//  СтрокаJSON - Строка  - Строка с данными
//  ПрочитатьВСоответствие - Булево - Если установлено Истина, чтение объекта JSON будет выполнено в Соответствие
//  СвойстваСоЗначениямиДата - Массив/Строка - Поля типа Дата
// 
// Возвращаемое значение:
//  Объект/Неопределено - Как правило это структура или массив
//
Функция ДесериализоватьДанные(СтрокаJSON, ПрочитатьВСоответствие = Ложь, СвойстваСоЗначениямиДата = Неопределено) Экспорт
	
	Данные = Неопределено;
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		Данные = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие, СвойстваСоЗначениямиДата);
		ЧтениеJSON.Закрыть();
		
	Исключение
		
		ТекстОшибки = "Не удалось десериализовать данные: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение(ТекстОшибки);
		
	КонецПопытки;
	
	Возврат Данные;
	
КонецФункции

// Сериализует объект в JSON-строку
//
// Параметры:
//  Данные - Объект - Как правило это структура или массив
// 
// Возвращаемое значение:
//  Строка - JSON-строка
//
Функция СериализоватьДанные(Данные) Экспорт
	
	Попытка
		
		ПараметрыJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
		
		Запись = Новый ЗаписьJSON();
		Запись.УстановитьСтроку(ПараметрыJSON);
		
		НастройкиСериализации = Новый НастройкиСериализацииJSON();
		НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
		НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
		
		ЗаписатьJSON(Запись, Данные, НастройкиСериализации);
	
		Возврат Запись.Закрыть();
		
	Исключение
		
		ТекстОшибки = "Не удалось сериализовать данные: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение(ТекстОшибки);
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти
