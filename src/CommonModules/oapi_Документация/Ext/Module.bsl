#Область ДемонстрационныйЗоомагазин

Функция ПолучитьКоллекциюТипов_Pet(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли
	
	Коллекция = Новый Структура();
	
	КатегорииПитомцев = Сервис.ТипСтруктура("Категории питомцев", "Category", Ложь);
	КатегорииПитомцев.Вставить("id"            , Сервис.ТипЧисло(1));
	КатегорииПитомцев.Вставить("name"          , Сервис.ТипСтрока("Собаки"));
	
	Ярлык = Сервис.ТипСтруктура("Ярлыки питомцев", "Tags", Ложь);
	Ярлык.Вставить("id"  , Сервис.ТипЧисло(1));
	Ярлык.Вставить("name", Сервис.ТипСтрока("Отличный пёсель"));
	
	Питомец = Сервис.ТипСтруктура("Информация о питомце", "Pet");
	Питомец.Вставить("id"      , Сервис.ТипЧисло(1, "Идентификатор питомца"));
	Питомец.Вставить("name"    , Сервис.ТипСтрока("Бобик", "Имя питомца"));
	Питомец.Вставить("category", КатегорииПитомцев);
	Питомец.Вставить("status"  , Сервис.ТипСтрока("Продан", "Статус питомца", Ложь));
	
	ЯрлыкиПитомца = Сервис.ТипМассив("Ярлыки питомца", Ложь);
	ЯрлыкиПитомца.Добавить(Ярлык);
	Питомец.Вставить("tags", ЯрлыкиПитомца);
	
	Коллекция.Вставить("Питомец", Питомец);
	
	Возврат Коллекция;
	
КонецФункции

Функция ДобавитьШаблон_Put_Pet(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли
	
	Шаблон = Сервис.ДобавитьШаблонURL("/pet", "Метод для обновления информации о существующем питомце");
	
	Метод = Шаблон.ДобавитьМетод("PUT", "Обновляет информацию о существующем питомце");
	Метод.ПолноеОписание  = "Обновляет информацию о существующем питомце по его идентификатору";
	Метод.ДобавитьТег(Сервис.ПоследнийТег);
	
	Питомец = Сервис.КоллекцияТипов.Питомцы.Питомец;
	
	ОписаниеМетода = "Обновляет информацию о существующем в магазине питомце";
	Метод.ДобавитьВариантЗапроса(ОписаниеМетода, "application/json").ДобавитьДанные(Питомец);
	Метод.ДобавитьВариантЗапроса(ОписаниеМетода, "application/xml").ДобавитьДанные(Питомец);
	Метод.ДобавитьВариантЗапроса(ОписаниеМетода, "application/x-www-form-urlencoded").ДобавитьДанные(Питомец);
	
	Метод.ДобавитьВариантОтвета(200, "Успешное выполнение")
		.ДобавитьДанные(Питомец, "application/json")
		.ДобавитьДанные(Питомец, "application/xml")
		.ДобавитьПример("Бобик", Питомец)
		.ДобавитьПримерJSON("Люська ищет хозяина",
			"{
			|  ""id"": 2,
			|  ""name"": ""Люська"",
			|  ""category"": {
			|    ""id"": 2,
			|    ""name"": ""Кошки""
			|  },
			|  ""status"": ""Ищет хозяина"",
			|  ""tags"": [
			|    {
			|      ""id"": 2,
			|      ""name"": ""Любит делать тыгдык""
			|    }
			|  ]
			|})");
		
	Метод.ДобавитьВариантОтвета(400, "Некорректный идентификатор питомца");
	Метод.ДобавитьВариантОтвета(404, "Питомец не найден");
	Метод.ДобавитьВариантОтвета(405, "Ошибка валидации данных");
	
	Возврат Шаблон;
	
КонецФункции

Функция ДобавитьШаблон_Get_Pet_PetId(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли
	
	Шаблон = Сервис.ДобавитьШаблонURL("/pet/{petId}", "Метод для поиска питомца по идентификатору");
	
	Метод = Шаблон.ДобавитьМетод("GET", "Возвращает информацию о существующем питомце по его идентификатору");
	Метод.ДобавитьТег(Сервис.ПоследнийТег);
	
	ИдентификаторПитомца = Сервис.ТипЧисло(1, "Идентификатор питомца", Истина);
	Метод.ДобавитьПараметрЗапроса("petId", ИдентификаторПитомца, Истина);
	
	Питомец = Сервис.КоллекцияТипов.Питомцы.Питомец;
	
	Метод.ДобавитьВариантОтвета(200, "Успешное выполнение")
		.ДобавитьДанные(Питомец, "application/json")
		.ДобавитьДанные(Питомец, "application/xml");
		
	Метод.ДобавитьВариантОтвета(400, "Некорректный идентификатор питомца");
	Метод.ДобавитьВариантОтвета(404, "Питомец не найден");
	
	Возврат Шаблон;
	
КонецФункции

Функция ДобавитьШаблон_Post_Pet_PetId_UploadImage(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли
	
	Шаблон = Сервис.ДобавитьШаблонURL("/pet/{petId}/uploadImage", "Загрузка фотографии питомца");
	
	Метод = Шаблон.ДобавитьМетод("POST", "Загружает фотографию питомца по его идентификатору");
	Метод.ДобавитьТег(Сервис.ПоследнийТег);
	
	ИдентификаторПитомца = Сервис.ТипЧисло(1, "Идентификатор питомца", Истина);
	Метод.ДобавитьПараметрЗапроса("petId", ИдентификаторПитомца, Истина);
	
	ОписаниеФотографии = Сервис.ТипСтрока("Моя любимая фоточка бобика", "Описание фотографии", Ложь);
	Метод.ДобавитьПараметрЗапроса("additionalMetadata", ОписаниеФотографии, Ложь);
	
	Метод.ДобавитьВариантЗапроса("Данные фотографии в двоичном виде", "application/octet-stream");
	
	РезультатЗагрузки = Сервис.ТипСтруктура(, "ApiResponse");
	РезультатЗагрузки.Вставить("code"   , Сервис.ТипЧисло(0, , Ложь));
	РезультатЗагрузки.Вставить("name"   , Сервис.ТипСтрока(, , Ложь));
	РезультатЗагрузки.Вставить("message", Сервис.ТипСтрока(, , Ложь));
	Метод.ДобавитьВариантОтвета(200, "Успешное выполнение").ДобавитьДанные(РезультатЗагрузки);
	
	Возврат Шаблон;
	
КонецФункции

Функция ПолучитьКоллекциюТипов_User(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли
	
	Коллекция = Новый Структура();
	
	Пользователь = Сервис.ТипСтруктура("Информация о пользователе", "User");
	Пользователь.Вставить("code"      , Сервис.ТипЧисло(10, "Идентификатор пользователя", Истина));
	Пользователь.Вставить("username"  , Сервис.ТипСтрока("theUser", "Ник", Истина));
	Пользователь.Вставить("firstName" , Сервис.ТипСтрока("Иван", "Имя ", Ложь));
	Пользователь.Вставить("lastName"  , Сервис.ТипСтрока("Иванов", "Фамилий", Ложь));
	Пользователь.Вставить("email"     , Сервис.ТипСтрока("ivanov@email.com", "Адрес электронной почты", Истина));
	Пользователь.Вставить("password"  , Сервис.ТипСтрока("12345", "Пароль", Истина));
	Пользователь.Вставить("phone"     , Сервис.ТипСтрока("12345", "Фамилий", Ложь));
	Пользователь.Вставить("userStatus", Сервис.ТипЧисло(1, "Статус пользователя", Ложь));
	
	Коллекция.Вставить("Пользователь", Пользователь);
	
	Возврат Коллекция;
	
КонецФункции

Функция ДобавитьШаблон_Post_User(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли
	
	Шаблон = Сервис.ДобавитьШаблонURL("/user", "Метод для создания пользователя");
	
	Метод = Шаблон.ДобавитьМетод("POST", "Создает пользователя");
	Метод.ПолноеОписание  = "Создает в базе данных нового пользователя со всей необходимой информацией";
	Метод.ДобавитьТег(Сервис.ПоследнийТег);
	
	Пользователь = Сервис.КоллекцияТипов.Пользователи.Пользователь;
	
	ОписаниеМетода = "Создает объект с данными пользователя";
	Метод.ДобавитьВариантЗапроса(ОписаниеМетода, "application/json").ДобавитьДанные(Пользователь);
	Метод.ДобавитьВариантЗапроса(ОписаниеМетода, "application/xml").ДобавитьДанные(Пользователь);
	Метод.ДобавитьВариантЗапроса(ОписаниеМетода, "application/x-www-form-urlencoded").ДобавитьДанные(Пользователь);
	
	Метод.ДобавитьВариантОтвета(200, "Успешное выполнение")
		.ДобавитьДанные(Пользователь, "application/json")
		.ДобавитьДанные(Пользователь, "application/xml");
		
	Возврат Шаблон;
	
КонецФункции

Функция ДобавитьШаблон_Get_User_Username(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли

	Шаблон = Сервис.ДобавитьШаблонURL("/user/{username}", "Метод для поиска пользователя по идентификатору");
	
	Метод = Шаблон.ДобавитьМетод("GET", "Возвращает информацию о пользователе");
	Метод.ПолноеОписание  = "Возвращает информацию о пользователе по его идентификатору";
	Метод.ДобавитьТег(Сервис.ПоследнийТег);
	
	ИмяПользователя = Сервис.ТипСтрока("user1", "Имя пользователя для поиска. Используейте user1 для тестирования", Истина);
	Метод.ДобавитьПараметрЗапроса("username", ИмяПользователя, Истина);
	
	Пользователь = Сервис.КоллекцияТипов.Пользователи.Пользователь;
	
	Метод.ДобавитьВариантОтвета(200, "Успешное выполнение")
		.ДобавитьДанные(Пользователь, "application/json")
		.ДобавитьДанные(Пользователь, "application/xml");
		
	Метод.ДобавитьВариантОтвета(400, "Некорректное имя пользователя");
	Метод.ДобавитьВариантОтвета(404, "Пользователь не найден");
	
	Возврат Шаблон;
	
КонецФункции

Функция ДобавитьШаблон_Get_User_Login(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли

	Шаблон = Сервис.ДобавитьШаблонURL("/user/login", "Метод для авторизации");
	
	Метод = Шаблон.ДобавитьМетод("GET", "Выполняет авторизацию пользователя");
	Метод.ПолноеОписание  = "Авторизует пользователя";
	Метод.ДобавитьТег(Сервис.ПоследнийТег);
	
	ИмяПользователя = Сервис.ТипСтрока(, "Имя пользователя", Ложь);
	Метод.ДобавитьПараметрЗапроса("username", ИмяПользователя, Ложь);
	Пароль = Сервис.ТипСтрока(, "Пароль", Ложь);
	Метод.ДобавитьПараметрЗапроса("password", Пароль, Ложь);
	
	Метод.ДобавитьВариантОтвета(200, "Успешное выполнение")
		.ДобавитьДанные(Сервис.ТипСтрока(), "application/json")
		.ДобавитьДанные(Сервис.ТипСтрока(), "application/xml")
		.ДобавитьЗаголовок("X-Rate-Limit", "integer", "Количество вызовов в час, разрешенных пользователю")
		.ДобавитьЗаголовок("X-Expires-After", "string", "Время жизни токена");
		
	Метод.ДобавитьВариантОтвета(400, "Некорректное имя пользователя или пароль");
	
	Возврат Шаблон;
	
КонецФункции

Функция ПолучитьСервисЗоомагазина(ИспользоватьСхемыДанных) Экспорт

	Сервис = Обработки.oapi_Сервис.Создать();
	Сервис.КраткоеОписание = "Зоомагазин ""Божья тварь""";
	Сервис.ПолноеОписание = "Демонстрационный пример API для зоомагазина";
	Сервис.ИспользоватьСхемыДанных = ИспользоватьСхемыДанных;
	Сервис.ДобавитьСервер("https://petstore3.swagger.io/api/v3");
	
	КоллекцияТипов = ПолучитьКоллекциюТипов_Pet(Сервис);
	Сервис.УстановитьКоллекцияТипов("Питомцы", КоллекцияТипов);
	
	Сервис.ДобавитьТег("Питомцы", "API для работы с питомцами");
	ДобавитьШаблон_Put_Pet(Сервис);
	ДобавитьШаблон_Get_Pet_PetId(Сервис);
	ДобавитьШаблон_Post_Pet_PetId_UploadImage(Сервис);
	
	КоллекцияТипов = ПолучитьКоллекциюТипов_User(Сервис);
	Сервис.УстановитьКоллекцияТипов("Пользователи", КоллекцияТипов);
	
	Сервис.ДобавитьТег("Пользователи", "API для работы с пользователями");
	ДобавитьШаблон_Post_User(Сервис);
	ДобавитьШаблон_Get_User_Username(Сервис);
	ДобавитьШаблон_Get_User_Login(Сервис);
	
	Возврат Сервис;
	
КонецФункции

#КонецОбласти

#Область ДемонстрационныйЗавод

Функция ДобавитьШаблон_Products_Manufacture(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли
	
	Шаблон = Сервис.ДобавитьШаблонURL("/products/manufacture", "Метод для получения информации о произведенных изделиях");
	
	Метод = Шаблон.ДобавитьМетод("POST", "Информация о произведенных изделиях");
	Метод.ПолноеОписание  = "Возвращает информация о произведенных изделиях с отбором по дате производства";
	Метод.ДобавитьТег(Сервис.ПоследнийТег);
	
	// Описываем структуру тела входящего запроса
	ДанныеФильтра = Сервис.ТипСтруктура("Фильтр", "FilterData").Вставить("productionDate", Сервис.ТипСтрока("08.08.2023"));
	Фильтр = Сервис.ТипСтруктура("Фильтр", "Filter");
	Фильтр.Вставить("filter", ДанныеФильтра);
	
	ФильтрПоДиапазону = Новый Соответствие();
	ФильтрПоДиапазону.Вставить(">=productionDate", "01.08.2023");
	ФильтрПоДиапазону.Вставить("<=productionDate", "08.08.2023");
	
	// Добавляем вариант входящего запроса
	Метод.ДобавитьВариантЗапроса("Фильтр по данным")
		.ДобавитьДанные(Фильтр)
		.ДобавитьПример("Фильтр по конкретной дате", Фильтр)
		.ДобавитьПример("Фильтр по диапазону дат", ФильтрПоДиапазону);
	
	// Описываем структуру возвращаемых данных
	ИнформацияОбИзделии = Сервис.ТипСтруктура("Информация об изделии", "Product");
	ИнформацияОбИзделии.Вставить("sn"            , Сервис.ТипСтрока("TURBO12345", "Серийный номер изделия"));
	ИнформацияОбИзделии.Вставить("name"          , Сервис.ТипСтрока("TURBO-500D2", "Наименование изделия"));
	ИнформацияОбИзделии.Вставить("productionDate", Сервис.ТипСтрока("08.08.2023","Дата производства"));
	
	МассивИзделий = Сервис.ТипМассив("Массив с информацией об изделиях", "Products");
	МассивИзделий.Добавить(ИнформацияОбИзделии);
	
	ДанныеОтвета = Сервис.ТипСтруктура("Информация об изделиях", "AnswerData");
	ДанныеОтвета.Вставить("products", МассивИзделий);
	ДанныеОтвета.Вставить("count"   , Сервис.ТипЧисло(1, "Количество изделий"));
	
	Ответ = Сервис.ТипСтруктура("Ответ сервиса", "Answer");
	Ответ.Вставить("response", ДанныеОтвета);
	Ответ.Вставить("error"   , Сервис.ТипСтрока("null", "Описание ошибки", Ложь));
	
	// Добавляем варианы ответов
	Метод.ДобавитьВариантОтвета(200, "Успешное выполнение")
		.ДобавитьДанные(Ответ)
		.ДобавитьДанные(Ответ, "application/xml");
		
	Метод.ДобавитьВариантОтвета(400, "Некорректный запрос");
	Метод.ДобавитьВариантОтвета(500, "Внутренняя ошибка сервиса");
	
	Возврат Шаблон;
	
КонецФункции

Функция ДобавитьШаблон_Products_Sale(Сервис)
	
	#Если Трамбон Тогда
	Сервис = Обработки.oapi_Сервис.Создать();
	#КонецЕсли
	
	Шаблон = Сервис.ДобавитьШаблонURL("/products/sale/{date_from}/{date_to}", "Метод для получения информации о проданных изделиях");
	
	Метод = Шаблон.ДобавитьМетод("GET", "Информация о проданных изделиях");
	Метод.ПолноеОписание  = "Возвращает информация о проданных изделиях за период";
	Метод.ДобавитьТег(Сервис.ПоследнийТег);
	
	// Описываем параметры входящего запроса
	НачалоПериода = Сервис.ТипСтрока("20230801", "Дата начала периода продаж");
	КонецПериода = Сервис.ТипСтрока("20230808", "Дата окончания продаж");
	Метод.ДобавитьПараметрЗапроса("date_from", НачалоПериода, Истина);
	Метод.ДобавитьПараметрЗапроса("date_to", КонецПериода, Истина);
	
	// Описываем структуру возвращаемых данных
	ИнформацияОбИзделии = Сервис.ТипСтруктура("Информация о продажа", "Sales");
	ИнформацияОбИзделии.Вставить("name" , Сервис.ТипСтрока("TURBO-500D2", "Наименование изделия"));
	ИнформацияОбИзделии.Вставить("count", Сервис.ТипЧисло(2, "Количество проданных изделий"));
	ИнформацияОбИзделии.Вставить("sum" , Сервис.ТипЧисло(895320.50, "Сумма продажи"));
	
	// Добавляем варианы ответов
	Метод.ДобавитьВариантОтвета(200, "Успешное выполнение").ДобавитьДанные(ИнформацияОбИзделии);
		
	Метод.ДобавитьВариантОтвета(400, "Некорректный запрос");
	Метод.ДобавитьВариантОтвета(500, "Внутренняя ошибка сервиса");
	
	Возврат Шаблон;
	
КонецФункции

Функция ПолучитьСервисЗавода(ИспользоватьСхемыДанных) Экспорт

	Сервис = Обработки.oapi_Сервис.Создать();
	Сервис.КраткоеОписание = "Завод ""Мостурбина""";
	Сервис.ПолноеОписание = "Демонстрационный пример API для завода";
	Сервис.ИспользоватьСхемыДанных = ИспользоватьСхемыДанных;
	Сервис.ДобавитьСервер("https://api.mosturbina.io/");
	
	Сервис.ДобавитьТег("Производство", "API для работы с данными производства");
	ДобавитьШаблон_Products_Manufacture(Сервис);
	
	Сервис.ДобавитьТег("Продажи", "API для работы с данными отдела продаж");
	ДобавитьШаблон_Products_Sale(Сервис);
	
	Возврат Сервис;
	
КонецФункции

#КонецОбласти